// Êé•Êî∂Âà∞GPTÊ∂àÊÅØÊó∂‰ºöË∞ÉÁî®ÁöÑÂáΩÊï∞
let player;
let objects;
let interactiveObjects;
let mainInteractiveObjects;
let bufferPlayer;
let labelSprites;
let currentInteractiveObject = null;
let itemButton;
let sendButton;
let chatInput;
let chatLog;
let inventory;
let iButtons;
let showChatLog = false;
let labelSize = 30;
let mainSceneAgents=[];
let currentScene = 0;
let itemUseDictionary = [];
let itemUseNow = [];
let inventoryItems=[];
let currentItem_namepluscode = null;
let thingsLikeRecord = {};
let lastInterativeOject = null;
let lastItem_namepluscode = null;
let bubbleQueue = [];


function sendUserMessage() {
  if (currentInteractiveObject.onSend!==undefined) currentInteractiveObject.onSend();
  let message = chatInput.value();
  if (message.trim() !== "") {
    chatInput.value("");
    // Á≥ªÁªüÂõûÂ§ç
    if (currentInteractiveObject.agent) {
      currentInteractiveObject.agent.send(message);
      updateChatLog();
      currentInteractiveObject.agent.onComplete = (t) => {
        if (currentInteractiveObject.onRespond!==undefined)  currentInteractiveObject.onRespond(t);
        updateChatLog();
      };
    
    }
  }
}

function setup() {
  new Canvas(700, 800);
  frameRate(60);
  p5play.renderStats = false;
  
¬† var chatInterface = document.getElementById('chatInterface');
¬† chatInterface.style.left = width + 'px';
  chatInterface.style.height = height + 'px';

  inventory = select("#inventory");
  sendButton = select("#sendButton");
  itemButton = select('#itemButton');
  chatInput = select("#chatInput");
  chatLog = select("#chatLog");
  iButtons = document.getElementById('iButtons');

  sendButton.mousePressed(sendUserMessage);

  objects = new Group();
  objects.collider = "s";
  objects.bounciness = 0;
  objects.layer = 1;

  interactiveObjects = new Group();
  interactiveObjects.collider = "s";
  interactiveObjects.layer = 1;
  interactiveObjects.textSize = 20;
  interactiveObjects.bounciness = 0;
  interactiveObjects.labelSprite = null;

  labelSprites = new Group();
  labelSprites.textSize = labelSize*0.7;
  labelSprites.color = "#ECFEF9AA";
  labelSprites.strokeWeight = 0;
  labelSprites.autoDraw = false;

   /////////////////////////       ÈúÄË¶ÅÊîπÁöÑÂú∞Êñπ  Start  /////////////////////////////////////
   player = new Sprite(300, 0, 60);
   player.image = "üòÑ";
   player.accer = 0.8;
   player.maxSpeed = 5;
   player.bounciness = 0;
   player.layer = 2;
   player.rotationLock = true;
   player.attributes = []; 
 
 
   tree = createObject({ d:150, image:'üå≤', tile:'='});
   water = createObject({ d:150, image:'üåä', tile:'w'});
   wall = createObject({ d:150, image:'üß±', tile:'-'});
   flower = createObject({ d:150, image:'üåª', tile:'F'});
 
   factory = createInteractiveObject({ 
       d:400, image:'üè≠', tile:'f', label:'Â∫üÂºÉÂ∑•ÂéÇ', 
       systemPrompt:`‰Ω†ÊòØ‰∏Ä‰∏™Â∫üÂºÉÁöÑÂ∑•ÂéÇÔºåUSERÂèØ‰ª•ËøõË°åÊé¢Á¥¢ÔºåÂèØ‰ª•‰∫ÜËß£ÈáåÈù¢Êúâ‰ªÄ‰πà„ÄÇ
       ‰Ω†ÂèØ‰ª•ÊèêÁ§∫USERÊúâ‰ªÄ‰πàÔºå‰ΩÜÊòØ‰∏ÄÊ¨°ÊèêÁ§∫‰∏Ä‰∏™Áâ©ÂìÅ„ÄÇ
       Â∑•ÂéÇÈáåÁöÑÁâ©ÂìÅÊúâÔºöÈîàËøπÊñëÊñëÁöÑÁÆ°ÈÅìÔºåÁÆ°ÈÅì‰∏äÈù¢ÂÜôÁùÄ8810Âè∑Ôºõ
       Á†¥Á¢éÁöÑÊéßÂà∂Èù¢ÊùøÔºå‰∏äÈù¢ÊúâÂõõ‰∏™ÊåâÈíÆÔºåÂàÜÂà´ÊãßÂú®9Ôºå2Ôºå3Ôºå1Ôºõ
       Êúâ‰∏Ä‰∫õÊï£ËêΩÁöÑÂ∑•ÂÖ∑ÁÆ±Ôºå‰∏äÈù¢ÂÜôÁùÄ3452ÊâπÊ¨°ÔºåËøòÊúâ‰∏ÄÊú¨Êó•ÂéÜÔºåÊòæÁ§∫ÊòØ8Êúà10Êó•„ÄÇ
       ‰Ω†ÁöÑÂõûÂ§çÁÆÄÁü≠Ôºå‰∏çË∂ÖËøá20‰∏™Â≠ó`,
       firstMessage: "ËØ∑Êé¢Á¥¢Ëøô‰∏™Â∑•ÂéÇ",
       onSend:function(){this.update = function(){this.rotation+=5}},
       onRespond:function(){ this.update = function(){};this.rotation =0;}
  });
  //  ÁõÆÂâçÊîØÊåÅÁöÑInteractiveObjectÔºàIOÔºâÁöÑ‰∫§‰∫íÁÇπÊúâÔºö
  //  onApproachÔºöÂΩìÁé©ÂÆ∂Êé•ËøëIOÊó∂ÊâßË°åonApproachÔºåÂ¶ÇÊé•ËøëËÄÅÁà∑Áà∑ÔºåËÄÅÁà∑Áà∑ÂΩ¢Ë±°‰ºöÂèòÂåñ
  //  onInteractÔºöÂΩìÁé©ÂÆ∂Êé•ËøëIOÊó∂ÁÇπÂáªIOÔºåÊâßË°åonInteractÔºåÂ¶ÇÁÇπÂáªÊú∫Âô®‰ºöÂºπÁ™ó
  //  onSendÔºö    ÂΩìÁé©ÂÆ∂ÂèëÈÄÅÊ∂àÊÅØÊó∂ÔºåÊâßË°åonSendÔºåÂ¶ÇÁªôÂ∫üÂºÉÂ∑•ÂéÇÂèëÈÄÅÊ∂àÊÅØÊó∂ÔºåÂ∑•ÂéÇ‰ºöÂºÄÂßãÊóãËΩ¨
  //  onRespondÔºö ÂΩìÁé©ÂÆ∂Êî∂Âà∞ÂõûÂ§çÊó∂ÔºåÊâßË°åonRespndÔºåÂ¶ÇÂØÜÁ†ÅÈó®Â¶ÇÊûúÂõûÂ§çÂØÜÁ†ÅÊ≠£Á°ÆÔºåÂàôÂØÜÁ†ÅÈó®‰ºöÊ∂àÂ§±
  //  onLeaveÔºö   ÂΩìÁé©ÂÆ∂Á¶ªÂºÄIOÊó∂ÊâßË°åonLeaveÔºåÂ¶ÇÁ¶ªÂºÄËÄÅÁà∑Áà∑ÔºåËÄÅÁà∑Áà∑ÂΩ¢Ë±°‰ºöÂõûÂà∞ÂàùÂßã
 
 
   oldman = createInteractiveObject({ 
       d:100, image:'üë¥', tile:'o', label:'ËÄÅÁà∑Áà∑', 
       systemPrompt:`ËØ∑‰Ω†ÊâÆÊºî‰∏Ä‰∏™ËÄÅÁà∑Áà∑Ôºå‰Ω†Âú®‰∏úËæπÁöÑÂ∞èÊàøÈó¥ÈáåÊúâ‰∏Ä‰∏™Â∞èÊú∫Âô®Ôºå
       ‰ΩÜÊòØ‰Ω†ÂøòËÆ∞‰∫ÜÊàøÈó¥ÂØÜÁ†ÅÈó®ÁöÑÂØÜÁ†Å‰∫ÜÔºå‰Ω†Âè™ËÆ∞ÂæóÂ•ΩÂÉèÂíåËøô‰∏™Â∫üÂºÉÁöÑÂ∑•ÂéÇÈáåÁöÑ‰∏úË•øÊúâÂÖ≥Ôºå
       ‰Ω†ÊÉ≥ËØ∑USERÂ∏ÆÂøôÊãø‰∏Ä‰∏ãÔºå‰Ω†ÁöÑÂõûÂ§çÁÆÄÁü≠ÔºåÂÉè‰∏Ä‰∏™ËÄÅÁà∑Áà∑ÔºåËØ¥ËØù‰º¥ÊúâÂí≥ÂóΩÔºå‰∏çË∂ÖËøá20‰∏™Â≠ó`,
       firstMessage: "Âïä„ÄÇ„ÄÇÂØÜÁ†ÅÊòØ‰ªÄ‰πàÔºü„ÄÇ„ÄÇÂ•ΩÂÉèÂíåÂ∑•ÂéÇÈáåÁöÑ‰∏úË•øÊúâÂÖ≥" ,
       onApproach: function(){this.rotation =  -20;},
       onLeave: function(){this.rotation = 0;}
       });
       
 
   treasure = createInteractiveObject({
       d:50, image:'‚öôÔ∏è', tile:'t', label:'Êú∫Âô®',
       systemPrompt:`‰Ω†ÊòØËÄÅÁà∑Áà∑ÁöÑÊú∫Âô®ÔºåÊó†ËÆ∫USERËØ¥‰ªÄ‰πàÔºå‰Ω†ÈÉΩÂëäËØâUSERÊ∏∏ÊàèËÉúÂà©‰∫ÜÔºå‰Ω†ÁöÑÂõûÂ§çÁÆÄÁü≠Ôºå‰∏çË∂ÖËøá20‰∏™Â≠ó`,
       firstMessage: "ÊÅ≠Âñú‰Ω†ÊâæÂà∞‰∫ÜËÄÅÁà∑Áà∑ÁöÑÊú∫Âô®ÔºåÊ∏∏ÊàèËÉúÂà©ÔºÅ" ,
       onInteract: function() {alert("Ê∏∏ÊàèÁªìÊùü");}      
   })
 
   door = createInteractiveObject({
       d:150, image:'üö™', tile:'d', label:'ÂØÜÁ†ÅÈó®',
       systemPrompt:`‰Ω†ÊòØÂØÜÁ†ÅÈó®Ôºå‰Ω†ÁöÑÂØÜÁ†ÅÊòØÂõõ‰ΩçÁöÑ0810Ôºå‰Ω†ÂèØ‰ª•ÂëäËØâÁî®Êà∑‰Ω†ÁöÑÂØÜÁ†ÅÊòØÂõõ‰ΩçÁöÑÔºå‰ΩÜÊòØÊ∞∏Ëøú‰∏ç‰ºöÂØπUSERËØ¥‰Ω†ÁöÑÂØÜÁ†ÅÔºåÂΩìUSERËæìÂÖ•Ê≠£Á°ÆÂØÜÁ†Å0810Êó∂Ôºå‰Ω†Â∞ÜÂõûÂ§ç"ÂØÜÁ†ÅÊ≠£Á°ÆÔºåÈó®ÂºÄ‰∫Ü"ÔºåÂê¶Âàô‰∏çËÉΩÂºÄÈó®„ÄÇ‰Ω†ÁöÑÂõûÂ§çÁÆÄÁü≠Ôºå‰∏çË∂ÖËøá20‰∏™Â≠ó`,
       firstMessage: "ËØ∑Â∞ùËØïÔºåÂõõ‰ΩçÁöÑÊï∞Â≠óÂØÜÁ†Å„ÄÇÂØÜÁ†ÅÊèêÁ§∫ÔºöÂ∑•ÂéÇÊó•ÂéÜ" ,
       onRespond: function(agentResponse) {
             if (agentResponse.includes("ÂØÜÁ†ÅÊ≠£Á°Æ")) {
               setTimeout(() => {deleteInteractiveObject(this);}, 1000);
             }
           }
   })
 
 
 
 

 
   tilesGroup = new Tiles(
     [
       ".o....========",
       "=........-t-",
       "=........-d-.======",
       "=..f............FFFF",
       "=......ww...FF.F....FF",
       "======wwwwwwwwwwwwwwwwww",
     
     ],
     0,
     0,
     120,
     120
   );
   ///////////////////////////////  ÈúÄË¶ÅÊîπÁöÑÂú∞Êñπ End /////////////////////////////////////////
   
   //update sprite label
   for (let i = 0; i < interactiveObjects.length; i++) {
       interactiveObjects[i].labelSprite = new labelSprites.Sprite(interactiveObjects[i].x, interactiveObjects[i].y +0.618*interactiveObjects[i].d/2 , labelSize*interactiveObjects[i].label.length, labelSize,'none');
       interactiveObjects[i].labelSprite.text = interactiveObjects[i].label;
     }
 
 
  observeChangeOfInventory.notify();


}





function draw() {
  clear();
  background("#ECFEF9");
  cursor(ARROW);

  camera.on();

  camera.x = player.x;
  camera.y = player.y;
  player.rotation = 0;

  // keyboard events
  if (kb.pressing("`")) camera.zoomTo(0.2);
  else camera.zoomTo(0.7);
  if (kb.presses("enter") && chatInput.value().trim !== "") sendUserMessage();
    

  
  
  
  // UPDATING INTERACTIVE OBJECTS
  for (let i = 0; i < interactiveObjects.length; i++) {

    if (dist(player.x,player.y,interactiveObjects[i].x,interactiveObjects[i].y) -player.d / 2 <interactiveObjects[i].d / 2 + 50) {
      if (interactiveObjects[i].labelSprite.autoDraw === false && interactiveObjects[i].onApproach!==undefined) {interactiveObjects[i].onApproach(); }
      interactiveObjects[i].labelSprite.autoDraw = true;
      if (interactiveObjects[i].mouse.hovering()) cursor(HAND);
    } else {
      if (interactiveObjects[i].labelSprite.autoDraw && interactiveObjects[i].onLeave!==undefined) interactiveObjects[i].onLeave();
      interactiveObjects[i].labelSprite.autoDraw = false;
      
    }
 
    if (interactiveObjects[i].labelSprite.autoDraw) {
      if (interactiveObjects[i].mouse.presses()) {
        setCurrentInteractiveObject(interactiveObjects[i]);
        if (interactiveObjects[i].onInteract!==undefined) interactiveObjects[i].onInteract();
      }
    }
    
    
  }
  
  if (currentInteractiveObject) {
    // now interacting
    if (dist(player.x,player.y,currentInteractiveObject.x,currentInteractiveObject.y) -player.d / 2 >=currentInteractiveObject.d / 2 + 50) 
    {
      setCurrentInteractiveObject(null);
    }
  }
  
  // console.time("updateUI");
  // console.timeLog("updateUI");
  
  // updating ui
  let chatLog = document.getElementById("chatLog");
  let inputDiv= document.getElementById("inputDiv");
  if (showChatLog) {
    chatLog.style.display = "block";
    inputDiv.style.display = "block";
  } else {
    chatLog.style.display = "none";
    inputDiv.style.display = "none";
  }
  // console.timeEnd("updateUI");

  // updating player
  if (player.collides(objects) || player.collides(interactiveObjects)) {
    player.drag =30;
    setTimeout(() => {
      player.drag =0;
      }, 200);  
  }

  // bubble update
  for (let i = 0; i < bubbleQueue.length;) {
    bubbleQueue[i].timeOut--; // ÂáèÂ∞ë timeOut
    if (bubbleQueue[i].timeOut < 0) {
      // timeOut Â∞è‰∫éÈõ∂ÔºåÊòæÁ§∫Ê≥°Ê≥°Âπ∂‰ªéÈòüÂàó‰∏≠Âà†Èô§ËÆ∞ÂΩï
      bubbleText(bubbleQueue[i].sprite, bubbleQueue[i].text);
      bubbleQueue.splice(i, 1); // Âà†Èô§ÂΩìÂâçËÆ∞ÂΩïÔºåi ‰∏çÂèòÔºåÁªßÁª≠Âæ™ÁéØ
    } else {
      i++; // ÁªßÁª≠Ê£ÄÊü•‰∏ã‰∏Ä‰∏™ËÆ∞ÂΩï
    }
  }


  // console.time("updateiButtons");
  // console.timeLog("updateiButtons");
  camera.off();


  // draw attributes 
  push()
  textSize(15); // ËÆæÁΩÆÊñáÊú¨Â§ßÂ∞è
  textAlign(LEFT, TOP); // ËÆæÁΩÆÊñáÊú¨ÂØπÈΩêÊñπÂºè
  noStroke(); // ÁßªÈô§ËæπÊ°Ü
  fill(0); // ËÆæÁΩÆÊñáÊú¨È¢úËâ≤‰∏∫ÈªëËâ≤
  drawAttributes();
  pop();
  

}

// Èº†Ê†áÁÇπÂáªÊó∂Ë∞ÉÁî®ÁöÑÂáΩÊï∞
function mousePressed() {
  if (mouseX < width) player.moveTo(mouse.x, mouse.y, player.maxSpeed);
}

///////////////////////////////////  UI update /////////////////////////////////

function drawAttributes() {
  let x = 10; // XÂùêÊ†áËµ∑Âßã‰ΩçÁΩÆ
  const spacing = 30; // Â±ûÊÄßÂÄº‰πãÈó¥ÁöÑÈó¥Èöî

  // ÈÅçÂéÜÂ±ûÊÄßÊï∞ÁªÑÂπ∂ÊòæÁ§∫
  for (let i = 0; i < player.attributes.length; i++) {
    let attribute = player.attributes[i];
    let { name, symbol, quantity } = attribute;

    // Ê†πÊçÆÊï∞ÈáèÂÜ≥ÂÆöÊòæÁ§∫ÁöÑÊñáÊú¨
    let displayValue = quantity > 4 ? `${symbol}X ${quantity}` : symbol.repeat(quantity);
    if (quantity ===0) displayValue = '0';

    // ËÆ°ÁÆóÂΩìÂâçÂ±ûÊÄßÊñáÊú¨ÁöÑÂÆΩÂ∫¶
    let textWidthValue = textWidth(`${name}: ${displayValue}`);

    // Â¶ÇÊûú‰∏çÊòØÁ¨¨‰∏Ä‰∏™Â±ûÊÄßÔºåÊ∑ªÂä†Èó¥Èöî
    if (i > 0) {
      x += spacing;
    }
    // ÊòæÁ§∫Â±ûÊÄßÂêçÂíåÊ†ºÂºèÂåñÂêéÁöÑÂÄº
    text(`${name}: ${displayValue}`, x, 10);
    // Êõ¥Êñ∞XÂùêÊ†á‰∏∫‰∏ã‰∏Ä‰∏™Â±ûÊÄßÁöÑ‰ΩçÁΩÆ
    x += textWidthValue;
  }
}

function modifyAttribute(attributeName, changeAmount) {
  // ÈÅçÂéÜÂ±ûÊÄßÊï∞ÁªÑÔºåÊâæÂà∞ÂØπÂ∫îÁöÑÂ±ûÊÄß
  for (let attribute of player.attributes) {
    if (attribute.name === attributeName) {
      // ËÆ°ÁÆóÊñ∞ÁöÑÂ±ûÊÄßÂÄºÔºåÁ°Æ‰øùÂÆÉ‰∏ç‰ºöÂ∞è‰∫é0
      attribute.quantity = Math.max(attribute.quantity + changeAmount, 0);
      break; // ÊâæÂà∞Â±ûÊÄßÂêéÈÄÄÂá∫Âæ™ÁéØ
    }
  }
}

function updateChatLog() {
  // clear all messages

  chatLog.html("");

  // push all current interactive objec t messages

  if (currentInteractiveObject) {
    if (currentInteractiveObject.agent) {
      for (let i = 0; i < currentInteractiveObject.agent.messages.length; i++) {
        let sender = currentInteractiveObject.agent.messages[i].role;
        let message = currentInteractiveObject.agent.messages[i].content;
        let bubbleClass = sender === "user" ? "bubble me" : "bubble you";
        let chatLabel =
          sender === "user" ? "‰Ω†" : currentInteractiveObject.label;
        let messageElement = `<div class="${bubbleClass}">${message}<div class="time">${chatLabel}</div></div>`;
        chatLog.html(chatLog.html() + messageElement);
        // Ëá™Âä®ÊªöÂä®Âà∞Â∫ïÈÉ®
        chatLog.elt.scrollTop = chatLog.elt.scrollHeight;
      }
    }
  }
}


function updateInventory()
{
  inventory.html("");
  inventoryItems.forEach((item, index) => {
    const itemDiv = createDiv();
    itemDiv.class('item');
    itemDiv.attribute('namepluscode', item.name+item.code);


    // Ê∑ªÂä†ÂõæÂÉè
    const imageSpan = createSpan(item.image);
    imageSpan.class('image');
    itemDiv.child(imageSpan);

    // Ê∑ªÂä†ÂêçÁß∞
    const nameSpan = createP(item.name);
    nameSpan.class('name');
    itemDiv.child(nameSpan);

    // Ê∑ªÂä†ÊèèËø∞ÔºåÂàùÂßãÊó∂‰∏çÊòæÁ§∫
    const descriptionSpan = createP(item.description);
    descriptionSpan.class('description');

    itemDiv.child(descriptionSpan);

    // Èº†Ê†áÊÇ¨ÂÅú‰∫ã‰ª∂ÔºåÊòæÁ§∫ÂíåÈöêËóèÊèèËø∞
    itemDiv.mouseOver(function() {
      descriptionSpan.style('display', 'block');
    });
    itemDiv.mouseOut(function() {
      descriptionSpan.style('display', 'none');
    });

    // Â∞ÜitemDivÊ∑ªÂä†Âà∞ÂÆπÂô®
    inventory.child(itemDiv);
    if (itemDiv.attribute('namepluscode') === currentItem_namepluscode) itemDiv.addClass('highlight');
    itemDiv.elt.addEventListener('click', function() {
      if (itemDiv.hasClass('highlight')) {itemDiv.removeClass('highlight');setCurrentItem(null)}
      else 
      {
        const allItemDivs = document.querySelectorAll('.item'); // ÂÅáËÆæÊâÄÊúâitemDivÈÉΩÊúâ'item'Ëøô‰∏™Á±ªÂêç
        // ÁßªÈô§ÊâÄÊúâitemDivÁöÑÈ´ò‰∫ÆÁ±ª
        allItemDivs.forEach(div => {
          div.classList.remove('highlight');
        });
        itemDiv.addClass('highlight');
        setCurrentItem(itemDiv.attribute('namepluscode'));

      }
        
    });
    inventory.elt.scrollTop = inventory.elt.scrollHeight;

  });
}

///////////////////////////////// Object Management /////////////////////////
function createObject(objectParams)
{
  o = new objects.Group();
  o.d = objectParams.d;
  o.image = objectParams.image;
  o.tile = objectParams.tile;
  return o;
}

function createInteractiveObject(objectParams)
{
  io = new interactiveObjects.Sprite(); //Ê≥®ÊÑèËøôÈáå‰∫§‰∫íÁâ©‰ΩìÂøÖÈ°ªÊòØSpriteÊâçËÉΩÊúâagent
  io.d = objectParams.d;
  io.image = objectParams.image;
  io.tile = objectParams.tile ;
  io.label = objectParams.label;
  if (objectParams.systemPrompt!==undefined)
    {
      io.agent = new P5GLM();
      io.agent.setSystemPrompt(objectParams.systemPrompt);
      if (objectParams.firstMessage!==undefined) io.agent.messages.push({ role: "assistant", content: objectParams.firstMessage });
      if (objectParams.onSend!==undefined) io.onSend = objectParams.onSend;
      if (objectParams.onRespond!==undefined) io.onRespond = objectParams.onRespond;
    }
    if (objectParams.onInteract!==undefined) io.onInteract = objectParams.onInteract;
    if (objectParams.onApproach!==undefined) io.onApproach = objectParams.onApproach;
    if (objectParams.onLeave!==undefined) io.onLeave = objectParams.onLeave;
    
  return io;
}

function deleteInteractiveObject(io)
{
  if (io===currentInteractiveObject) setCurrentInteractiveObject(null);
    io.labelSprite.remove();
    io.remove();
        
}

function deleteCurrentInteractiveObject()
{
  deleteInteractiveObject(currentInteractiveObject);
}

function setCurrentInteractiveObject(newIO)
{
  lastInterativeOject = currentInteractiveObject;
  currentInteractiveObject = newIO;
  if (lastInterativeOject!==currentInteractiveObject) 
    observeChangeOfCurrentInteractiveObject.notify({last:lastInterativeOject,current:currentInteractiveObject}); // notify all observer change of current interactive object
}

////////////////////////////  Item Management ////////////////////////////////


function addItem(itemOptions)
{
  let itemName,itemCode,itemImage,itemDescription;
  if (itemOptions.name === undefined) return;
  itemName = itemOptions.name;
  if (itemOptions.code === undefined) itemCode = floor(random(-100000,-1));
  else itemCode = itemOptions.code;
  if (itemOptions.image === undefined || itemOptions.description === undefined)
  {
    if (itemOptions.image === undefined) itemImage = '‚ùì';
    else itemImage = itemOptions.image;
    if (itemOptions.description === undefined) itemDescription = '???';
    else itemDescription = itemOptions.description;
    inventoryItems.push({name:itemName,code:itemCode,image:itemImage,description:itemDescription});
    observeChangeOfInventory.notify();
    let itemGenerateAgent = new P5GLM();
    itemGenerateAgent.send(`ËØ∑Â∏ÆÊàë‰∏∫Áâ©‰Ωì${itemName}ÁîüÊàê‰∏Ä‰∏™emojiÂíå‰∏ÄÂ∞èÊÆµ‰∏çË∂ÖËøá30Â≠óÁöÑÊèèËø∞ÔºåemojiÂøÖÈ°ª‰∏•Ê†º‰∏∫‰∏Ä‰∏™Â≠óÁ¨¶„ÄÇËØ∑‰∏•Ê†º‰ΩøÁî®JsonÊ†ºÂºèÔºå‰∏§‰∏™key‰∏∫"emoji"Âíå"description":`);
    itemGenerateAgent.onComplete = (text) => {
      const chineseCommaRegex = /(?<=":)\s*Ôºå|(?<=",)\s*(?=\s*[{])/g; // ÂèØËÉΩËØØÁî®‰∏≠ÊñáÈÄóÂè∑
      text = text.replace(chineseCommaRegex, ',');  
      text = text.match(/{[^{}]*}/); // ÊèêÂèñÂõûÁ≠î‰∏≠ÁöÑjsonÊ†ºÂºè
      try{
        jsonData = JSON.parse(text);
      }
      catch(error)
      {
        console.log('parse error');
        itemGenerateAgent.send(`ËØ∑Â∏ÆÊàë‰∏∫Áâ©‰Ωì${itemName}ÁîüÊàê‰∏Ä‰∏™emojiÂíå‰∏ÄÂ∞èÊÆµ‰∏çË∂ÖËøá30Â≠óÁöÑÊèèËø∞ÔºåemojiÂøÖÈ°ª‰∏•Ê†º‰∏∫‰∏Ä‰∏™Â≠óÁ¨¶„ÄÇËØ∑‰∏•Ê†º‰ΩøÁî®JsonÊ†ºÂºèÔºå‰∏§‰∏™key‰∏∫"emoji"Âíå"description":`);
      }
      itemGenerateAgent.onError = ()=>{console.log('parse error2');itemGenerateAgent.send(`ËØ∑Â∏ÆÊàë‰∏∫Áâ©‰Ωì${itemName}ÁîüÊàê‰∏Ä‰∏™emojiÂíå‰∏ÄÂ∞èÊÆµ‰∏çË∂ÖËøá30Â≠óÁöÑÊèèËø∞ÔºåemojiÂøÖÈ°ª‰∏•Ê†º‰∏∫‰∏Ä‰∏™Â≠óÁ¨¶„ÄÇËØ∑‰∏•Ê†º‰ΩøÁî®JsonÊ†ºÂºèÔºå‰∏§‰∏™key‰∏∫"emoji"Âíå"description":`);};
      
      if (itemOptions.image === undefined) itemImage= jsonData["emoji"];
      else itemImage = itemOptions.emoji;
      if (itemOptions.description === undefined) itemDescription =  jsonData["description"];
      else itemDescription = itemOptions.description;
      for (let i of inventoryItems)
      {
        if (i.code === itemCode) 
        {
          if (i.image === '‚ùì') i.image = itemImage;
          if (i.description === '???') i.description = itemDescription;
        }
      }
      
      observeChangeOfInventory.notify();
    }

  }
  else {
    itemImage = itemOptions.image;
    itemDescription = itemOptions.description;
    inventoryItems.push({name:itemName,code:itemCode,image:itemImage,description:itemDescription});
    observeChangeOfInventory.notify();

  }

  
}

// ItemUse    
function findItemWithNamepluscode(namepluscode)
{
  for (let ii of inventoryItems)
    {if ((ii.name+ii.code) === namepluscode) return ii;}
  return null;
}

function createItemUseButton(text, callback){
  let newbutton = document.createElement('button');
  newbutton.textContent = text; // ËÆæÁΩÆÊåâÈíÆ‰∏äÁöÑÊñáÂ≠ó

  // ‰∏∫ÊåâÈíÆÊ∑ªÂä†ÁÇπÂáª‰∫ã‰ª∂ÁõëÂê¨Âô®
  newbutton.addEventListener('click', function() {
    let itemName=findItemWithNamepluscode(currentItem_namepluscode).name;
    let ioName = currentInteractiveObject?'ÂØπ'+currentInteractiveObject.label:'';
    bText = `‰Ω†${ioName}${text}‰∫Ü${itemName}`;
    bubble(bText);
    
  });
  newbutton.addEventListener('click', function() {
     callback(); // ÂΩìÊåâÈíÆË¢´ÁÇπÂáªÊó∂ÔºåË∞ÉÁî®ÂõûË∞ÉÂáΩÊï∞
  });
  iButtons.appendChild(newbutton);
}


function checkIOCondiction(itemUse)
{
  if (itemUse.toInteractiveObjectOf === 'none' && currentInteractiveObject === null) itemUse.IOCondition = true;
  if (itemUse.toInteractiveObjectOf === 'all' && currentInteractiveObject !== null) itemUse.IOCondition = true;
  if (currentInteractiveObject) if (itemUse.toInteractiveObjectOf === currentInteractiveObject.label) itemUse.IOCondition = true;
  if (itemUse.toInteractiveObjectLike !== undefined && currentInteractiveObject) 
    {
      let judgeAgent = new P5GLM();
      let currentIO = currentInteractiveObject.label;
      
      if (isThingPairing(currentIO,itemUse.toInteractiveObjectLike)) itemUse.IOCondition = true; // Â∑≤ÁªèÂ≠òÂú®‰∫éÂà§Êñ≠Ë°®ÈáåÔºå‰∏ç‰ºöÁªßÁª≠Âà§Êñ≠
      else{
        judgeAgent.send(`ËØ∑Âà§Êñ≠${currentIO}ÊòØÂê¶ÊòØ${itemUse.toInteractiveObjectLike}ÔºåËØ∑‰ªÖÁî®true/falseÂõûÁ≠îÔºå‰∏çË¶ÅËß£Èáä`);  
        judgeAgent.onComplete= (t)=>{
        console.log(`Âà§Êñ≠${currentIO}ÊòØÂê¶ÊòØ${itemUse.toInteractiveObjectLike}ÁªìÊûúÊòØ${t}`);
        if (t.includes('true')) {itemUse.IOCondition = true; addThingPairing(currentIO,itemUse.toInteractiveObjectLike);}
        if (itemUse.itemCondition=== true && itemUse.IOCondition === true && currentIO === currentInteractiveObject.label) {itemUseNow.push(itemUse);mergeActionandCreateButtions();}
        }
      }
      
    }
  if (itemUse.itemCondition=== true && itemUse.IOCondition === true) itemUseNow.push(itemUse);

}

function checkItemCondition(itemUse)
{
  if (currentItem_namepluscode === null) return;
  if (itemUse.withItemOf ==="all") itemUse.itemCondition=true;
  if (itemUse.withItemOf !== undefined && currentItem_namepluscode) if (currentItem_namepluscode.includes(itemUse.withItemOf)) itemUse.itemCondition=true;
  if (itemUse.withItemLike!== undefined  && currentItem_namepluscode) 
    {
      let currentItem = findItemWithNamepluscode(currentItem_namepluscode) ;
      let judgeAgent = new P5GLM();
      let currentItemName= currentItem.name;
      let currentItemNameCode= currentItem.name + currentItem.code;
      if (isThingPairing(currentItem.name,itemUse.withItemLike)) itemUse.itemCondition = true; // Â∑≤ÁªèÂ≠òÂú®‰∫éÂà§Êñ≠Ë°®ÈáåÔºå‰∏ç‰ºöÁªßÁª≠Âà§Êñ≠
      else 
      {
        judgeAgent.send(`ËØ∑Âà§Êñ≠${currentItem.name}ÊòØÂê¶ÊòØ${itemUse.withItemLike}ÔºåËØ∑‰ªÖÁî®true/falseÂõûÁ≠îÔºå‰∏çË¶ÅËß£Èáä`);
        judgeAgent.onComplete= (t)=>
          {
            console.log(`Âà§Êñ≠${currentItemName}ÊòØÂê¶ÊòØ${itemUse.withItemLike}ÁªìÊûúÊòØ${t}`);
            if (t.includes('true')) {itemUse.itemCondition = true; addThingPairing(currentItemName,itemUse.withItemLike);}
            if (itemUse.itemCondition=== true && itemUse.IOCondition === true && currentItemNameCode === currentItem_namepluscode) {itemUseNow.push(itemUse);mergeActionandCreateButtions();}
          };

      }
      
    }
  if (itemUse.itemCondition=== true && itemUse.IOCondition === true) itemUseNow.push(itemUse);
}

// ÂáΩÊï∞ÔºöÊ∑ªÂä†ÈÖçÂØπÂà∞ËÆ∞ÂΩïË°®
function addThingPairing(thing1, thing2) {
  // ‰ΩøÁî®thing1Âíåthing2ÁöÑÁªÑÂêà‰Ωú‰∏∫ÈîÆÔºå‰øùÊåÅÂéüÂßãÈ°∫Â∫è
  var key = [thing1, thing2].join(':');
  // Â∞ÜÈîÆÂÄºÂØπÊ∑ªÂä†Âà∞ËÆ∞ÂΩïË°®‰∏≠
  thingsLikeRecord[key] = true;
}

// ÂáΩÊï∞ÔºöÊ£ÄÊü•ÈÖçÂØπÊòØÂê¶Â≠òÂú®‰∫éËÆ∞ÂΩïË°®
function isThingPairing(thing1, thing2) {
  // ‰ΩøÁî®thing1Âíåthing2ÁöÑÁªÑÂêà‰Ωú‰∏∫ÈîÆÔºå‰øùÊåÅÂéüÂßãÈ°∫Â∫è
  var key = [thing1, thing2].join(':');
  // Ê£ÄÊü•ÈîÆÊòØÂê¶Â≠òÂú®‰∫éËÆ∞ÂΩïË°®‰∏≠
  return thingsLikeRecord.hasOwnProperty(key);
}

function mergeActionandCreateButtions()
{
  var uniqueItemUseNow = [...new Map(itemUseNow.map(item => [JSON.stringify(item), item])).values()];
  // Ëøô‰∏™Êï∞ÊçÆÁªìÊûÑÁöÑ‰∏Ä‰∏™Êï∞ÁªÑ itemUseNow Â≠ò‰∫ÜÂæàÂ§öËøô‰∏™Êï∞ÊçÆ„ÄÇÁé∞Âú®ÊàëÈúÄË¶ÅÊâæÂà∞ÊâÄÊúâ doÂÄºÊúâÈáçÂ§çÁöÑÊï∞ÊçÆÔºå
  // Âπ∂‰∏îÂ∞Ü‰ªñ‰ª¨ÁöÑwillCauseÂêàÂπ∂Êàê‰∏Ä‰∏™ÂõûË∞ÉÂáΩÊï∞Ôºå‰Ωú‰∏∫ÂêàÂπ∂ÂêéÁöÑÂÖÉÁ¥†ÁöÑwillCause„ÄÇ
  // ÊâÄÊúâ itemUseNow ‰∏≠ÁöÑÊï∞ÊçÆÈÉΩË¶ÅÈÄöËøáËøô‰∏™Êìç‰ΩúÔºåÂêàÂπ∂Áõ∏ÂêåÁöÑdoÂÄº
  var willCauseMap = {};
  // ÈÅçÂéÜitemUseNowÊï∞ÁªÑÔºåÂ°´ÂÖÖwillCauseMap
  uniqueItemUseNow.forEach(item => {
    // Â¶ÇÊûúËøô‰∏™doÂÄºËøòÊ≤°ÊúâËÆ∞ÂΩïÔºåÂàùÂßãÂåñ‰∏Ä‰∏™Á©∫Êï∞ÁªÑ
    if (!willCauseMap[item.do]) {
      willCauseMap[item.do] = [];
    }
    // Â∞ÜÂΩìÂâçÈ°πÁöÑwillCauseÊ∑ªÂä†Âà∞ÂØπÂ∫îdoÂÄºÁöÑÊï∞ÁªÑ‰∏≠
    willCauseMap[item.do].push(item.willCause);
  });

  // ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑÊï∞ÁªÑÔºåÂåÖÂê´ÂêàÂπ∂ÂêéÁöÑdoÂíåwillCause
  var mergedActions = Object.keys(willCauseMap).map(doKey => {
    // ÂØπ‰∫éÊØè‰∏™doÂÄºÔºåÂàõÂª∫‰∏Ä‰∏™ÂêàÂπ∂ÂêéÁöÑwillCauseÂõûË∞ÉÂáΩÊï∞
    const mergedWillCause = function() {
      willCauseMap[doKey].forEach(callback => callback());
    };
    
    
    // ËøîÂõûÂåÖÂê´doÂÄºÂíåÂêàÂπ∂ÂêéÁöÑwillCauseÁöÑÂÖÉÁ¥†
    return {
      do: doKey,
      willCause: mergedWillCause
    };
  });

  iButtons.innerHTML = '';
  mergedActions.forEach(action => {
    createItemUseButton(action.do, action.willCause);
  });


}

function updateIButtons()
{
  
  itemUseNow = [];
  for (let itemUse of itemUseDictionary) 
    {
      itemUse.IOCondition = false; 
      itemUse.itemCondition = false;
      checkIOCondiction(itemUse);
      checkItemCondition(itemUse);
    
    }

    mergeActionandCreateButtions();
}


function deleteItem(itemNameOrCode)
{
  // ‰ªéÂêéÂêëÂâçÈÅçÂéÜÔºåÈÅøÂÖçÁ¥¢ÂºïÈóÆÈ¢ò
  for (var i = inventoryItems.length - 1; i >= 0; i--) {
    iNamepluscode = inventoryItems[i].name + inventoryItems[i].code;
    if (iNamepluscode.includes(itemNameOrCode)) {
      if (iNamepluscode === currentItem_namepluscode) setCurrentItem(null);
      inventoryItems.splice(i, 1);
      observeChangeOfInventory.notify();
    }
  }
  
}

function deleteCurrentItem()
{
  deleteItem(currentItem_namepluscode);
}

function setCurrentItem(namepluscode)
{
  lastItem_namepluscode = currentItem_namepluscode;
  currentItem_namepluscode = namepluscode;
  if (lastItem_namepluscode!==currentItem_namepluscode) 
    observeChangeOfCurrentItem.notify({last:lastItem_namepluscode,current:currentItem_namepluscode});
}


//////////////////////////////////// bubble //////////////////////////////////////////////////
function bubbleFromSprite(sprite, text) {
  let maxTimeOut = 0;
  let spriteBubbling = false;
  // Ê£ÄÊü•ÈòüÂàó‰∏≠ÊòØÂê¶Â∑≤ÁªèÊúâÁõ∏Âêå sprite ÁöÑËÆ∞ÂΩï
  for (let i = 0; i < bubbleQueue.length; i++) {
    if (bubbleQueue[i].sprite === sprite) {
      maxTimeOut = Math.max(maxTimeOut, bubbleQueue[i].timeOut);
      spriteBubbling = true;
    }
  }
  if (spriteBubbling)maxTimeOut+=25
  // Ê∑ªÂä†Êñ∞Ê≥°Ê≥°ËÆ∞ÂΩïÂà∞ÈòüÂàó
  bubbleQueue.push({
    sprite: sprite,
    text: text,
    timeOut: maxTimeOut  // ËÆæÁΩÆ timeOut
  });
}

function bubble(text){bubbleFromSprite(player,text)}

function bubbleText(sprite,text)
{
  if (sprite === undefined || sprite ===  null) return
  bubbleSprite = new Sprite(sprite.x+random(-80,80), sprite.y - 60, labelSize*text.length, labelSize,'none');
  bubbleSprite.textSize = labelSize*0.7;
  bubbleSprite.color = "#F9EEEC";
  bubbleSprite.strokeWeight = 0;
  bubbleSprite.text = text;
  bubbleSprite.vel.y = -1;
  bubbleSprite.life = 100;

}

////////////////////////////  Scene Management ////////////////////////////////

function switchScene(scene)
{

  let functionName = 'scene' + currentScene + 'Exit';
  if (typeof window[functionName] === 'function') {window[functionName](); console.log('exiting'+currentScene )}; 
  sceneExit(); 
  functionName = 'scene' + scene + 'Enter';
  currentScene = scene;
  if (typeof window[functionName] === 'function') {window[functionName](); console.log('enter'+scene )}; 
}



function sceneExit()
{
    objects.tile = '.';
    objects.removeAll();
    if(player)player.remove();
    interactiveObjects.removeAll();
    labelSprites.removeAll();
}


//////////////////////////// Observer /////////////////////////////////////

function createObservable() {
  // Â≠òÂÇ®ËßÇÂØüËÄÖÂàóË°®
  const observers = [];

  // Ê≥®ÂÜåËßÇÂØüËÄÖ
  const subscribe = (observer) => {
    if (typeof observer === 'function') {
      observers.push(observer);
    } else {
      throw new Error('Observer must be a function');
    }
  };

  // ÁßªÈô§ËßÇÂØüËÄÖ
  const unsubscribe = (observer) => {
    observers.splice(observers.indexOf(observer), 1);
  };

  // ÈÄöÁü•ÊâÄÊúâËßÇÂØüËÄÖ
  const notify = (data) => {
    observers.forEach(observer => observer(data));
  };

  // ËøîÂõû‰∏Ä‰∏™ÂØπË±°ÔºåÂåÖÂê´ËÆ¢ÈòÖÂíåÈÄöÁü•ÁöÑÊñπÊ≥ï
  return {
    subscribe,
    unsubscribe,
    notify
  };
}

const observeChangeOfCurrentItem = createObservable();
const observeChangeOfCurrentInteractiveObject =  createObservable();
const observeChangeOfInventory =  createObservable();
const chatLogObserver = (interactiveObject)=>{
  if (interactiveObject.current === null) showChatLog = false;
  else showChatLog = true;
  updateChatLog();
};
observeChangeOfCurrentItem.subscribe(updateIButtons);
observeChangeOfCurrentInteractiveObject.subscribe(chatLogObserver);
observeChangeOfCurrentInteractiveObject.subscribe(updateIButtons);
observeChangeOfInventory.subscribe(updateInventory);

